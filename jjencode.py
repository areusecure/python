# -*- coding: iso-8859-1 -*-
#!/usr/bin/env python
# By Jonathan James (jj@jonathanj.com)
import sys
import os

class encoder:
	htmldict={'!':'&#33', '\"':'&#34', '#':'&#35','$':'&#36', '%':'&#37', 
	'\&':'&#38', '\'':'&#39', '(':'&#40',')':'&#41', '*':'&#42', 
	'+':'&#43', ',':'&#44', '-':'&#45','.':'&#46', '/':'&#47', 
	'0':'&#48', '1':'&#49', '2':'&#50','3':'&#51', '4':'&#52', 
	'5':'&#53', '6':'&#54', '7':'&#55','8':'&#56', '9':'&#57', 
	':':'&#58', '':'&#59', '<':'&#60','=':'&#61', '>':'&#62', 
	'?':'&#63', '@':'&#64', 'A':'&#65','B':'&#66', 'C':'&#67',
	'D':'&#68', 'E':'&#69', 'F':'&#70','G':'&#71', 'H':'&#72', 
	'I':'&#73', 'J':'&#74', 'K':'&#75','L':'&#76', 'M':'&#77', 
	'N':'&#78', 'O':'&#79', 'P':'&#80','Q':'&#81', 'R':'&#82', 
	'S':'&#83', 'T':'&#84', 'U':'&#85','V':'&#86', 'W':'&#87', 
	'X':'&#88', 'Y':'&#89', 'Z':'&#90','[':'&#91', '\\':'&#92', 
	']':'&#93', '^':'&#94', '_':'&#95','`':'&#96', 'a':'&#97', 
	'b':'&#98', 'c':'&#99', 'd':'&#100','e':'&#101', 'f':'&#102', 
	'g':'&#103', 'h':'&#104', 'i':'&#105','j':'&#106', 'k':'&#107', 
	'l':'&#108', 'm':'&#109', 'n':'&#110','o':'&#111', 'p':'&#112', 
	'q':'&#113', 'r':'&#114', 's':'&#115','t':'&#116', 'u':'&#117', 
	'v':'&#118', 'w':'&#119', 'x':'&#120','y':'&#121', 'z':'&#122', 
	'{':'&#123', '|':'&#124', '}':'&#125','~':'&#126', '¡':'&#161', 
	'¢':'&#162', '£':'&#163', '¤':'&#164', '¥':'&#165','¦':'&#166', 
	'§':'&#167', '¨':'&#168', '©':'&#169', 'ª':'&#170','«':'&#171', 
	'¬':'&#172', '­':'&#173', '®':'&#174', '¯':'&#175','°':'&#176', 
	'±':'&#177', '²':'&#178', '³':'&#179', '´':'&#180','µ':'&#181', 
	'¶':'&#182', '·':'&#183', '¸':'&#184', '¹':'&#185','º':'&#186', 
	'»':'&#187', '¼':'&#188', '½':'&#189', '¾':'&#190','¿':'&#191', 
	'À':'&#192', 'Á':'&#193', 'Â':'&#194', 'Ã':'&#195','Ä':'&#196', 
	'Å':'&#197', 'Æ':'&#198', 'Ç':'&#199', 'È':'&#200','É':'&#201', 
	'Ê':'&#202', 'Ë':'&#203', 'Ì':'&#204', 'Í':'&#205','Î':'&#206', 
	'Ï':'&#207', 'Ð':'&#208', 'Ñ':'&#209', 'Ò':'&#210','Ó':'&#211', 
	'Ô':'&#212', 'Õ':'&#213', 'Ö':'&#214', '×':'&#215','Ø':'&#216', 
	'Ù':'&#217', 'Ú':'&#218', 'Û':'&#219', 'Ü':'&#220','Ý':'&#221', 
	'Þ':'&#222', 'ß':'&#223', 'à':'&#224', 'á':'&#225','â':'&#226', 
	'ã':'&#227', 'ä':'&#228', 'å':'&#229', 'æ':'&#230','ç':'&#231', 
	'è':'&#232', 'é':'&#233', 'ê':'&#234', 'ë':'&#235','ì':'&#236', 
	'í':'&#237', 'î':'&#238', 'ï':'&#239', 'ð':'&#240','ñ':'&#241', 
	'ò':'&#242', 'ó':'&#243', 'ô':'&#244', 'õ':'&#245','ö':'&#246', 
	'÷':'&#247', 'ø':'&#248', 'ù':'&#249', 'ú':'&#250','û':'&#251', 
	'ü':'&#252', 'ý':'&#253', 'þ':'&#254', 'ÿ':'&#255'}
	hexdict={
	'!':'&#x21', '\"':'&#x22', '#':'&#x23',
	'$':'&#x24', '%':'&#x25', '&':'&#x26', '\'':'&#x27', '(':'&#x28',
	')':'&#x29', '*':'&#x2a', '+':'&#x2b', ',':'&#x2c', '-':'&#x2d',
	'.':'&#x2e', '/':'&#x2f', '0':'&#x30', '1':'&#x31', '2':'&#x32',
	'3':'&#x33', '4':'&#x34', '5':'&#x35', '6':'&#x36', '7':'&#x37',
	'8':'&#x38', '9':'&#x39', ':':'&#x3a', '':'&#x3b', '<':'&#x3c',
	'=':'&#x3d', '>':'&#x3e', '?':'&#x3f', '@':'&#x40', 'A':'&#x41',
	'B':'&#x42', 'C':'&#x43', 'D':'&#x44', 'E':'&#x45', 'F':'&#x46',
	'G':'&#x47', 'H':'&#x48', 'I':'&#x49', 'J':'&#x4a', 'K':'&#x4b',
	'L':'&#x4c', 'M':'&#x4d', 'N':'&#x4e', 'O':'&#x4f', 'P':'&#x50',
	'Q':'&#x51', 'R':'&#x52', 'S':'&#x53', 'T':'&#x54', 'U':'&#x55',
	'V':'&#x56', 'W':'&#x57', 'X':'&#x58', 'Y':'&#x59', 'Z':'&#x5a',
	'[':'&#x5b', '\\':'&#x5c', ']':'&#x5d', '^':'&#x5e', '_':'&#x5f',
	'`':'&#x60', 'a':'&#x61', 'b':'&#x62', 'c':'&#x63', 'd':'&#x64',
	'e':'&#x65', 'f':'&#x66', 'g':'&#x67', 'h':'&#x68', 'i':'&#x69',
	'j':'&#x6a', 'k':'&#x6b', 'l':'&#x6c', 'm':'&#x6d', 'n':'&#x6e',
	'o':'&#x6f', 'p':'&#x70', 'q':'&#x71', 'r':'&#x72', 's':'&#x73',
	't':'&#x74', 'u':'&#x75', 'v':'&#x76', 'w':'&#x77', 'x':'&#x78',
	'y':'&#x79', 'z':'&#x7a', '{':'&#x7b', '|':'&#x7c', '}':'&#x7d',
	'~':'&#x7e', '¡':'&#xa1', '¢':'&#xa2', '£':'&#xa3', '¤':'&#xa4', '¥':'&#xa5',
	'¦':'&#xa6', '§':'&#xa7', '¨':'&#xa8', '©':'&#xa9', 'ª':'&#xaa',
	'«':'&#xab', '¬':'&#xac', '­':'&#xad', '®':'&#xae', '¯':'&#xaf',
	'°':'&#xb0', '±':'&#xb1', '²':'&#xb2', '³':'&#xb3', '´':'&#xb4',
	'µ':'&#xb5', '¶':'&#xb6', '·':'&#xb7', '¸':'&#xb8', '¹':'&#xb9',
	'º':'&#xba', '»':'&#xbb', '¼':'&#xbc', '½':'&#xbd', '¾':'&#xbe',
	'¿':'&#xbf', 'À':'&#xc0', 'Á':'&#xc1', 'Â':'&#xc2', 'Ã':'&#xc3',
	'Ä':'&#xc4', 'Å':'&#xc5', 'Æ':'&#xc6', 'Ç':'&#xc7', 'È':'&#xc8',
	'É':'&#xc9', 'Ê':'&#xca', 'Ë':'&#xcb', 'Ì':'&#xcc', 'Í':'&#xcd',
	'Î':'&#xce', 'Ï':'&#xcf', 'Ð':'&#xd0', 'Ñ':'&#xd1', 'Ò':'&#xd2',
	'Ó':'&#xd3', 'Ô':'&#xd4', 'Õ':'&#xd5', 'Ö':'&#xd6', '×':'&#xd7',
	'Ø':'&#xd8', 'Ù':'&#xd9', 'Ú':'&#xda', 'Û':'&#xdb', 'Ü':'&#xdc',
	'Ý':'&#xdd', 'Þ':'&#xde', 'ß':'&#xdf', 'à':'&#xe0', 'á':'&#xe1',
	'â':'&#xe2', 'ã':'&#xe3', 'ä':'&#xe4', 'å':'&#xe5', 'æ':'&#xe6',
	'ç':'&#xe7', 'è':'&#xe8', 'é':'&#xe9', 'ê':'&#xea', 'ë':'&#xeb',
	'ì':'&#xec', 'í':'&#xed', 'î':'&#xee', 'ï':'&#xef', 'ð':'&#xf0',
	'ñ':'&#xf1', 'ò':'&#xf2', 'ó':'&#xf3', 'ô':'&#xf4', 'õ':'&#xf5',
	'ö':'&#xf6', '÷':'&#xf7', 'ø':'&#xf8', 'ù':'&#xf9', 'ú':'&#xfa',
	'û':'&#xfb', 'ü':'&#xfc', 'ý':'&#xfd', 'þ':'&#xfe', 'ÿ':'&#xff' }
	
	hex2dict={
	' ':'%20', '!':'%21', '\"':'%22', '#':'%23',
	'$':'%24', '%':'%25', '&':'%26', '\'':'%27', '(':'%28',
	')':'%29', '*':'%2a', '+':'%2b', ',':'%2c', '-':'%2d',
	'.':'%2e', '/':'%2f', '0':'%30', '1':'%31', '2':'%32',
	'3':'%33', '4':'%34', '5':'%35', '6':'%36', '7':'%37',
	'8':'%38', '9':'%39', ':':'%3a', '':'%3b', '<':'%3c',
	'=':'%3d', '>':'%3e', '?':'%3f', '@':'%40', 'A':'%41',
	'B':'%42', 'C':'%43', 'D':'%44', 'E':'%45', 'F':'%46',
	'G':'%47', 'H':'%48', 'I':'%49', 'J':'%4a', 'K':'%4b',
	'L':'%4c', 'M':'%4d', 'N':'%4e', 'O':'%4f', 'P':'%50',
	'Q':'%51', 'R':'%52', 'S':'%53', 'T':'%54', 'U':'%55',
	'V':'%56', 'W':'%57', 'X':'%58', 'Y':'%59', 'Z':'%5a',
	'[':'%5b', '\\':'%5c', ']':'%5d', '^':'%5e', '_':'%5f',
	'`':'%60', 'a':'%61', 'b':'%62', 'c':'%63', 'd':'%64',
	'e':'%65', 'f':'%66', 'g':'%67', 'h':'%68', 'i':'%69',
	'j':'%6a', 'k':'%6b', 'l':'%6c', 'm':'%6d', 'n':'%6e',
	'o':'%6f', 'p':'%70', 'q':'%71', 'r':'%72', 's':'%73',
	't':'%74', 'u':'%75', 'v':'%76', 'w':'%77', 'x':'%78',
	'y':'%79', 'z':'%7a', '{':'%7b', '|':'%7c', '}':'%7d',
	'~':'%7e', '¡':'%a1', '¢':'%a2', '£':'%a3', '¤':'%a4', '¥':'%a5',
	'¦':'%a6', '§':'%a7', '¨':'%a8', '©':'%a9', 'ª':'%aa',
	'«':'%ab', '¬':'%ac', '­':'%ad', '®':'%ae', '¯':'%af',
	'°':'%b0', '±':'%b1', '²':'%b2', '³':'%b3', '´':'%b4',
	'µ':'%b5', '¶':'%b6', '·':'%b7', '¸':'%b8', '¹':'%b9',
	'º':'%ba', '»':'%bb', '¼':'%bc', '½':'%bd', '¾':'%be',
	'¿':'%bf', 'À':'%c0', 'Á':'%c1', 'Â':'%c2', 'Ã':'%c3',
	'Ä':'%c4', 'Å':'%c5', 'Æ':'%c6', 'Ç':'%c7', 'È':'%c8',
	'É':'%c9', 'Ê':'%ca', 'Ë':'%cb', 'Ì':'%cc', 'Í':'%cd',
	'Î':'%ce', 'Ï':'%cf', 'Ð':'%d0', 'Ñ':'%d1', 'Ò':'%d2',
	'Ó':'%d3', 'Ô':'%d4', 'Õ':'%d5', 'Ö':'%d6', '×':'%d7',
	'Ø':'%d8', 'Ù':'%d9', 'Ú':'%da', 'Û':'%db', 'Ü':'%dc',
	'Ý':'%dd', 'Þ':'%de', 'ß':'%df', 'à':'%e0', 'á':'%e1',
	'â':'%e2', 'ã':'%e3', 'ä':'%e4', 'å':'%e5', 'æ':'%e6',
	'ç':'%e7', 'è':'%e8', 'é':'%e9', 'ê':'%ea', 'ë':'%eb',
	'ì':'%ec', 'í':'%ed', 'î':'%ee', 'ï':'%ef', 'ð':'%f0',
	'ñ':'%f1', 'ò':'%f2', 'ó':'%f3', 'ô':'%f4', 'õ':'%f5',
	'ö':'%f6', '÷':'%f7', 'ø':'%f8', 'ù':'%f9', 'ú':'%fa',
	'û':'%fb', 'ü':'%fc', 'ý':'%fd', 'þ':'%fe', 'ÿ':'%ff' }
	
	def hexencode(self,data):
		hex_result = ""
		for byte in data:
			try:
				hex_result += (self.hexdict[byte] + ";")
			except KeyError:
				pass
		return hex_result
		
	def htmlencode(self,data):
		html_result = ""
		for byte in data:
			try:
				html_result += (self.htmldict[byte] + ";")
			except KeyError:
				pass
		return html_result
		
	def hex2encode(self,data):
		hex2_result = ""
		for byte in data:
			try:
				hex2_result += (self.hex2dict[byte])
			except KeyError:
				hex2_result += "%" + str(byte.encode("hex"))
		return hex2_result

def main():
	if len(sys.argv) < 3:
		print "Usage: " + sys.argv[0] + " [html/hex/hex2] [file]"
		exit(0)
	if os.path.isfile(sys.argv[2]):
		f = open(sys.argv[2],"rb")
		contents = f.read()
		f.close()
	else:
		contents = sys.argv[2]

	e = encoder()
	try:
		exec "print e." + sys.argv[1] + "encode(contents)"
	except AttributeError:
		print "Usage: " + sys.argv[0] + " [html/hex] [file]"

if __name__ == "__main__":
	main()